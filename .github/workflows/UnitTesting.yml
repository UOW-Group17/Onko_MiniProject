name: Unit Testing Code Base

on:
  # Ensuring the main code base works 
  push:
    branches: [ "main", "dev" ]
  # Ensuring any pull requests to main are tested 
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  # Testing to be run on Linux distros
  build:
    runs-on: ubuntu-latest
    # what versions of the run times need to be tested
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    
    # Getting git code base
    - uses: actions/checkout@v4
    
    # Creating the python environment
    - name: Set up Python Environment ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Creating the poetry build system environment
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
          version: 2.1.1
          virtualenvs-create: true
          
    # No idea what the next 3 sections do just copied from
    # https://github.com/sjswerdloff/tdwii_plus_examples/blob/main/.github/workflows/python-app.yml#L38
    - name: Configure poetry
      run: poetry config virtualenvs.in-project true
    
    - name: Poetry Cache
      uses: actions/cache@v4
      id: poetry-cache
      with:
        path: .venv
        key: venv-${{ hashFiles('**/poetry.lock') }}
      
    - name: Ensure cache is healthy
      if: steps.poetry-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        timeout 10s poetry run pip --version || rm -rf .venv

    - name: updating poetry lock file
      run: poetry lock
    
    - name: Installing Poetry Dependencies
      run: poetry install
    # SO confused right now
    - name: Seeing where the test diectory is
      run: ls tests
      
    # Running the tests required
    - name: Running automated pytests Tests
      run: poetry run pytest tests
