name: Unit Testing Code Base

on:
  # Ensuring the main and dev code bases works 
  push:
    branches: [ "main", "dev" ]
  # Ensuring any pull requests to main and dev are tested 
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  # Testing to be run on macos, ubuntu and windows
  # Testing on serveral version of python 3.11, 3.12, 3.13
  # Version python varsion 3.10 was removed dues to compatability issues with macos
  Unit-Test:
  # Setting default shell to bash other wise windows will use powershell and the test will fail
    defaults:
      run:
        shell: bash
    # Test Statagy for the job which os and what python versions
    strategy: 
      matrix:
        os-version: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]    
    runs-on: ${{ matrix.os-version }}
    
    steps:
      # Getting git code base
      - uses: actions/checkout@v4
      
      # Creating the python environment
      - name: Set up Python Environment ${{ matrix.python-version }} on ${{ matrix.os-version }} runner
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
  
      # Creating the poetry build system environment
      - name: Install Poetry
        uses: snok/install-poetry@v1.4.1
        with:
            version: 2.1.1
            virtualenvs-create: true
            virtualenvs-in-project: true
  
      # Setting Up Cache
      # Taken from sjswerdloff
      # https://github.com/sjswerdloff/tdwii_plus_examples/blob/main/.github/workflows/python-app.yml#L38
      - name: Poetry Cache
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}
  
        # Checking is the cache to see it works fine
        # Taken from sjswerdloff
        # https://github.com/sjswerdloff/tdwii_plus_examples/blob/main/.github/workflows/python-app.yml#L38
      - name: Ensure cache is healthy
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          timeout 10s poetry run pip --version || rm -rf .venv
  
      # Installing dependencies
      # NOTE: tests would not work if pytest-qt was active
      # NOTE: pytest-qt may be disabled
      - name: Installing Poetry Dependencies
        run: poetry install
      
      # Running the tests required
      - name: Running Automated Tests using Pytest
        # getting the source files for to the files in the test file was a pain so we doing this on root
        run: poetry run pytest
